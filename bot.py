from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import F
import logging
import asyncio

API_TOKEN = "7921515467:AAFBIpnFz2I5AxLguOQBweNfcMDUIWxcXy8"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ --- #
def main_menu():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="\U0001F4C5 –£—Å—Ç—Ä–æ–∏—Ç—å—Å—è", callback_data="hire"),
        InlineKeyboardButton(text="\U0001F4B8 –ì—Ä–∞—Ñ–∏–∫ –≤—ã–ø–ª–∞—Ç", callback_data="payments")
    )
    builder.row(
        InlineKeyboardButton(text="\U0001F4DA –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è —Å–∫–∞—É—Ç–æ–≤", url="https://yshz.tilda.ws/")
    )
    builder.row(
        InlineKeyboardButton(text="\U0001F4F0 –ù–æ–≤–æ—Å—Ç–∏", url="https://t.me/+Kxie3mQpivhiMzFi")
    )
    builder.row(
        InlineKeyboardButton(text="\U0001F5E3Ô∏è –ß–∞—Ç –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", url="https://t.me/+TG6btcG-SbA3Yjky")
    )
    builder.row(
        InlineKeyboardButton(text="\U0001F4BB –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 'Yandex Pro'", callback_data="apps")
    )
    builder.row(
        InlineKeyboardButton(text="\U0001F6E0Ô∏è –¢–µ—Ö. –ø—Ä–æ–±–ª–µ–º—ã", callback_data="tech_issues")
    )
    builder.row(
        InlineKeyboardButton(text="\U0001F4DD –í–æ–ø—Ä–æ—Å—ã –ø–æ –≤—ã–ø–ª–∞—Ç–∞–º, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞–º –∏ –ø—Ä–æ—á–µ–º—É", callback_data="questions")
    )
    return builder.as_markup()

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ú–µ–Ω—é"
def get_default_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton(text="–ú–µ–Ω—é"))
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–µ–Ω–¥–æ—Ä–∞
def questions_menu():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="Creon", url="https://t.me/creonhelper"),
        InlineKeyboardButton(text="Service Pro", url="https://t.me/TopDoerHelpBot")
    )
    return builder.as_markup()

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò --- #
@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    await message.answer("\U0001F44B –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu())
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' –≤–Ω–∏–∑—É —Å–ª–µ–≤–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é.", reply_markup=get_default_keyboard())

@dp.message(F.text.lower() == "–º–µ–Ω—é")
async def show_main_menu(message: types.Message):
    await message.answer("\U0001F44B –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu())

@dp.callback_query(F.data == "hire")
async def hire_menu(callback_query: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="Creon", url="https://t.me/creonhelper"),
        InlineKeyboardButton(text="Service Pro", url="https://t.me/TopDoerHelpBot")
    )
    await callback_query.message.answer("\U0001F4BC –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–Ω–¥–æ—Ä:", reply_markup=builder.as_markup())
    await callback_query.message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' –≤–Ω–∏–∑—É —Å–ª–µ–≤–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é.", reply_markup=get_default_keyboard())

@dp.callback_query(F.data == "payments")
async def payments_menu(callback_query: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="Creon", callback_data="payments_kreon"),
        InlineKeyboardButton(text="Service Pro", callback_data="payments_servicepro")
    )
    await callback_query.message.answer("\U0001F4B5 –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–Ω–¥–æ—Ä:", reply_markup=builder.as_markup())
    await callback_query.message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' –≤–Ω–∏–∑—É —Å–ª–µ–≤–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é.", reply_markup=get_default_keyboard())

@dp.callback_query(F.data == "payments_kreon")
async def payments_kreon(callback_query: types.CallbackQuery):
    text = ("\U0001F4B5 *–í—ã–ø–ª–∞—Ç—ã Creon*:\n\n"
            "–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "–°–ª–æ—Ç—ã —Å 30.09 –ø–æ 6 –æ–∫—Ç—è–±—Ä—è - –≤—ã–ø–ª–∞—Ç–∞ 10 –æ–∫—Ç—è–±—Ä—è\n"
            "–°–ª–æ—Ç—ã —Å 7 –ø–æ 13 –æ–∫—Ç—è–±—Ä—è - –≤—ã–ø–ª–∞—Ç–∞ 17 –æ–∫—Ç—è–±—Ä—è\n"
            "–°–ª–æ—Ç—ã —Å 14 –ø–æ 20 –æ–∫—Ç—è–±—Ä—è - –≤—ã–ø–ª–∞—Ç–∞ 24 –æ–∫—Ç—è–±—Ä—è\n"
            "–°–ª–æ—Ç—ã —Å 21 –ø–æ 27 –æ–∫—Ç—è–±—Ä—è - –≤—ã–ø–ª–∞—Ç–∞ 31 –æ–∫—Ç—è–±—Ä—è")
    await callback_query.message.answer(text, parse_mode="Markdown")
    await callback_query.message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' –≤–Ω–∏–∑—É —Å–ª–µ–≤–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é.", reply_markup=get_default_keyboard())

@dp.callback_query(F.data == "payments_servicepro")
async def payments_servicepro(callback_query: types.CallbackQuery):
    text = ("\U0001F4B5 *–í—ã–ø–ª–∞—Ç—ã Service Pro*:\n\n"
            "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - —Å—Ä–µ–¥–∞\n"
            "–í—Ç–æ—Ä–Ω–∏–∫ - —á–µ—Ç–≤–µ—Ä–≥\n"
            "–°—Ä–µ–¥–∞ - –ø—è—Ç–Ω–∏—Ü–∞\n"
            "–ß–µ—Ç–≤–µ—Ä–≥, –ø—è—Ç–Ω–∏—Ü–∞ - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n"
            "–°—É–±–±–æ—Ç–∞, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—Ç–æ—Ä–Ω–∏–∫")
    await callback_query.message.answer(text, parse_mode="Markdown")
    await callback_query.message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' –≤–Ω–∏–∑—É —Å–ª–µ–≤–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é.", reply_markup=get_default_keyboard())

@dp.callback_query(F.data == "apps")
async def apps(callback_query: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="Android", url="https://play.google.com/store/apps/details?id=ru.yandex.taximeter&hl=ru"),
        InlineKeyboardButton(text="iOS", url="https://apps.apple.com/ru/app/—è–Ω–¥–µ–∫—Å-–ø—Ä–æ-–≤–æ–¥–∏—Ç–µ–ª–∏-–∏-–∫—É—Ä—å–µ—Ä—ã/id1496904594")
    )
    await callback_query.message.answer("\U0001F4F1 –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å:", reply_markup=builder.as_markup())
    await callback_query.message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' –≤–Ω–∏–∑—É —Å–ª–µ–≤–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é.", reply_markup=get_default_keyboard())

@dp.callback_query(F.data == "tech_issues")
async def tech_issues(callback_query: types.CallbackQuery):
    text = ("\U0001F527 *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã*:\n\n"
            "üîç –ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å —Å–ª–æ—Ç\n\n"
            "–ü–æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–µ–æ, —É–¥–∞–ª–∏—Ç—å –∏ –∑–∞–Ω–æ–≤–æ —Å–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç - –ø–∏—à–∏—Ç–µ —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä—Éüëá\n\n")
    await callback_query.message.answer(text, parse_mode="Markdown")
    await callback_query.message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' –≤–Ω–∏–∑—É —Å–ª–µ–≤–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é.", reply_markup=get_default_keyboard())

@dp.callback_query(F.data == "questions")
async def questions_menu(callback_query: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="Creon", url="https://t.me/creonhelper"),
        InlineKeyboardButton(text="Service Pro", url="https://t.me/TopDoerHelpBot")
    )
    await callback_query.message.answer("\U0001F4BC –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–Ω–¥–æ—Ä:", reply_markup=builder.as_markup())
    await callback_query.message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' –≤–Ω–∏–∑—É —Å–ª–µ–≤–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é.", reply_markup=get_default_keyboard())

# --- –ó–ê–ü–£–°–ö --- #
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


